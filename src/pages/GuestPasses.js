import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { 
  Users, 
  UserCheck, 
  UserX, 
  Calendar, 
  BarChart3, 
  Settings, 
  Plus,
  Search,
  Filter,
  Download,
  Eye,
  Clock,
  CheckCircle,
  XCircle,
  AlertCircle,
  Building2
} from 'lucide-react';
import { useGuestPassStore } from '../stores/guestPassStore';
import PassTable from '../components/PassTable';
import PassAnalytics from '../components/PassAnalytics';
import AdminControls from '../components/AdminControls';
import GuestPassDebugger from '../components/GuestPassDebugger';

const GuestPasses = () => {
  const { projectId } = useParams();
  const [activeTab, setActiveTab] = useState('overview');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedProject, setSelectedProject] = useState(null);
  
  const {
    stats,
    users,
    passes,
    globalSettings,
    loading,
    error,
    fetchStats,
    fetchUsers,
    fetchPasses,
    fetchGlobalSettings,
    blockUser,
    unblockUser,
    updateUserLimit,
    updateGlobalLimit,
    resetMonthlyUsage
  } = useGuestPassStore();

  useEffect(() => {
    const selectedProjectData = localStorage.getItem('adminSelectedProject');
    if (selectedProjectData) {
      const project = JSON.parse(selectedProjectData);
      setSelectedProject(project);
      
      // Debug logging
      console.log('🔍 GuestPasses Debug Info:');
      console.log('  URL projectId:', projectId);
      console.log('  Selected project:', project);
      console.log('  Project ID from localStorage:', project?.id);
      
      // Use the project ID from localStorage if available, otherwise use URL projectId
      const activeProjectId = project?.id || projectId;
      console.log('  Active project ID being used:', activeProjectId);
      
      // Fetch data for the current project
      if (activeProjectId) {
        console.log('📡 Fetching data for project:', activeProjectId);
        fetchStats(activeProjectId);
        fetchUsers(activeProjectId);
        fetchPasses(activeProjectId);
        fetchGlobalSettings(activeProjectId);
      }
    }
  }, [projectId]);

  const tabs = [
    { id: 'overview', name: 'Overview', icon: BarChart3 },
    { id: 'passes', name: 'Pass Logs', icon: Calendar },
    { id: 'admin', name: 'Admin Controls', icon: Settings }
  ];

  const filteredPasses = passes.filter(pass => 
    pass.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
    pass.userName.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (!selectedProject) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="text-center">
          <Building2 className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">No Project Selected</h3>
          <p className="text-gray-500">Please select a project to manage guest passes.</p>
        </div>
      </div>
    );
  }

  // Show loading state
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-pre-red mx-auto mb-4"></div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Loading Guest Passes</h3>
          <p className="text-gray-500">Fetching data for {selectedProject.name}...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Guest Passes</h1>
          <p className="text-gray-600 mt-2">
            Manage guest passes for <span className="font-semibold text-pre-red">{selectedProject.name}</span>
          </p>
          {(users.length === 0 && passes.length === 0) && (
            <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <p className="text-sm text-blue-700">
                <strong>Getting Started:</strong> This system will track guest passes generated by the mobile app. 
                Users and passes will appear here once the mobile app starts creating them.
              </p>
            </div>
          )}
        </div>
        <div className="mt-4 sm:mt-0 flex space-x-3">
          <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors flex items-center space-x-2">
            <Download className="h-4 w-4" />
            <span>Export Data</span>
          </button>
          <button 
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-pre-red text-white rounded-lg hover:bg-red-700 transition-colors flex items-center space-x-2"
          >
            <Plus className="h-4 w-4" />
            <span>Refresh Data</span>
          </button>
        </div>
      </div>

      {/* Debug Section - Remove this after fixing the issue */}
      <GuestPassDebugger projectId={selectedProject?.id || projectId} />

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Passes This Month</p>
              <p className="text-3xl font-bold text-gray-900">{stats?.totalPassesThisMonth || 0}</p>
            </div>
            <div className="p-3 bg-blue-100 rounded-xl">
              <Calendar className="h-6 w-6 text-blue-600" />
            </div>
          </div>
          <div className="mt-4">
            <div className="flex items-center text-sm">
              <span className="text-green-600 font-medium">+12%</span>
              <span className="text-gray-500 ml-2">from last month</span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Passes Sent</p>
              <p className="text-3xl font-bold text-gray-900">{stats?.passesSent || 0}</p>
            </div>
            <div className="p-3 bg-green-100 rounded-xl">
              <CheckCircle className="h-6 w-6 text-green-600" />
            </div>
          </div>
          <div className="mt-4">
            <div className="flex items-center text-sm">
              <span className="text-green-600 font-medium">
                {stats?.totalPassesThisMonth > 0 
                  ? Math.round((stats?.passesSent / stats?.totalPassesThisMonth) * 100)
                  : 0}%
              </span>
              <span className="text-gray-500 ml-2">completion rate</span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Active Users</p>
              <p className="text-3xl font-bold text-gray-900">{users?.filter(u => !u.blocked).length || 0}</p>
            </div>
            <div className="p-3 bg-green-100 rounded-xl">
              <UserCheck className="h-6 w-6 text-green-600" />
            </div>
          </div>
          <div className="mt-4">
            <div className="flex items-center text-sm">
              <span className="text-gray-500">{users?.length || 0} total users</span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Global Limit</p>
              <p className="text-3xl font-bold text-gray-900">{globalSettings?.monthlyLimit || 0}</p>
            </div>
            <div className="p-3 bg-orange-100 rounded-xl">
              <AlertCircle className="h-6 w-6 text-orange-600" />
            </div>
          </div>
          <div className="mt-4">
            <div className="flex items-center text-sm">
              <span className="text-gray-500">Monthly limit</span>
            </div>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="bg-white rounded-xl shadow-lg border border-gray-100">
        <div className="border-b border-gray-200">
          <nav className="flex space-x-8 px-6">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                  activeTab === tab.id
                    ? 'border-pre-red text-pre-red'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <tab.icon className="h-4 w-4" />
                <span>{tab.name}</span>
              </button>
            ))}
          </nav>
        </div>

        <div className="p-6">
          {activeTab === 'overview' && (
            <PassAnalytics 
              stats={stats}
              users={users}
              passes={passes}
              selectedProject={selectedProject}
            />
          )}


          {activeTab === 'passes' && (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">Pass Logs</h3>
                <div className="flex items-center space-x-3">
                  <div className="relative">
                    <Search className="h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Search passes..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pre-red focus:border-transparent"
                    />
                  </div>
                  <button className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50">
                    <Filter className="h-4 w-4" />
                  </button>
                </div>
              </div>

              <PassTable passes={filteredPasses} />
            </div>
          )}

          {activeTab === 'admin' && (
            <AdminControls 
              globalSettings={globalSettings}
              users={users}
              onUpdateGlobalLimit={updateGlobalLimit}
              onResetUsage={resetMonthlyUsage}
              onUpdateUserLimit={updateUserLimit}
              onBlockUser={blockUser}
              onUnblockUser={unblockUser}
              projectId={projectId}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default GuestPasses;
