rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Admins collection - allow admins to read their own data and check admin status
    match /admins/{adminId} {
      allow read, write: if request.auth != null && request.auth.uid == adminId;
    }
    
    // Allow admins to read all admin documents (for admin management)
    match /admins/{adminId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow admins to create new admin accounts
    match /admins/{adminId} {
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow admins to update admin accounts
    match /admins/{adminId} {
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow admins to delete admin accounts
    match /admins/{adminId} {
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing admins collection (needed for admin management dashboard)
    match /admins {
      allow list: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Users collection - TEMPORARY: Open for iOS registration workaround
    match /users/{userId} {
      allow read: if true;
      allow write: if true; // Temporarily allow all writes for registration
    }
    
    // Allow listing users collection (needed for admin dashboard)
    match /users {
      allow list: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Projects collection - allow public read access for registration
    match /projects/{projectId} {
      allow read: if true; // Allow anyone to read projects (needed for registration)
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)); // Only admins can modify
    }
    
    // Allow listing projects collection (needed for admin dashboard and guard authentication)
    match /projects {
      allow list: if request.auth != null && 
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) || // Admins can list
         // Guards can list projects to find their own guard account
         // We'll check if they're a guard in any project by allowing this for all authenticated users
         request.auth != null);
    }
    
    // PROJECT-SPECIFIC COLLECTIONS - New Architecture
    // These rules allow authenticated users to access data within specific projects
    
    // Project Users - users can access user data within their project
    match /projects/{projectId}/users/{userId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing project users
    match /projects/{projectId}/users {
      allow list: if request.auth != null;
    }
    
    // Project Sports - allow authenticated users to read/write within project
    match /projects/{projectId}/sports/{sportId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project sports
    match /projects/{projectId}/sports {
      allow list, get: if request.auth != null;
    }
    
    // Project Courts - allow authenticated users to read/write within project
    match /projects/{projectId}/courts/{courtId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project courts
    match /projects/{projectId}/courts {
      allow list, get: if request.auth != null;
    }
    
    // Project Academies - allow authenticated users to read/write within project
    match /projects/{projectId}/academies/{academyId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project academies
    match /projects/{projectId}/academies {
      allow list, get: if request.auth != null;
    }
    
    // Project Service Categories - allow authenticated users to read/write within project
    match /projects/{projectId}/serviceCategories/{categoryId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project service categories
    match /projects/{projectId}/serviceCategories {
      allow list, get: if request.auth != null;
    }
    
    // Project Services within Categories - allow authenticated users to read/write within project
    match /projects/{projectId}/serviceCategories/{categoryId}/services/{serviceId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project services within categories
    match /projects/{projectId}/serviceCategories/{categoryId}/services {
      allow list: if request.auth != null;
    }
    
    // Project Request Categories - allow authenticated users to read/write within project
    match /projects/{projectId}/requestCategories/{categoryId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project request categories
    match /projects/{projectId}/requestCategories {
      allow list, get: if request.auth != null;
    }
    
    // Project Request Submissions - allow authenticated users to read/write within project
    match /projects/{projectId}/requestSubmissions/{submissionId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project request submissions
    match /projects/{projectId}/requestSubmissions {
      allow list, get: if request.auth != null;
    }
    
    // Project Request Messages - allow authenticated users to read/write within project
    match /projects/{projectId}/requestSubmissions/{submissionId}/messages/{messageId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project request messages
    match /projects/{projectId}/requestSubmissions/{submissionId}/messages {
      allow list, get: if request.auth != null;
    }
    
    // Project Request Invoices - allow authenticated users to read/write within project
    match /projects/{projectId}/requestSubmissions/{submissionId}/invoices/{invoiceId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project request invoices
    match /projects/{projectId}/requestSubmissions/{submissionId}/invoices {
      allow list, get: if request.auth != null;
    }
    
    // Project Complaints - allow authenticated users to read/write within project
    match /projects/{projectId}/complaints/{complaintId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project complaints
    match /projects/{projectId}/complaints {
      allow list: if request.auth != null;
    }
    
    // Project Shops - allow authenticated users to read/write within project
    match /projects/{projectId}/shops/{shopId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project shops
    match /projects/{projectId}/shops {
      allow list: if request.auth != null;
    }
    
    // Project Stores - allow authenticated users to read/write within project
    match /projects/{projectId}/stores/{storeId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project stores
    match /projects/{projectId}/stores {
      allow list, get: if request.auth != null && request.auth.uid != null;
    }
    
    // Project Products - allow authenticated users to read/write within project
    match /projects/{projectId}/products/{productId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project products
    match /projects/{projectId}/products {
      allow list: if request.auth != null;
    }
    
    // Project Orders - users can read/write their own orders within project
    match /projects/{projectId}/orders/{orderId} {
      allow read, write: if request.auth != null && request.auth.uid != null;
    }
    
    // Allow listing project orders (users only see their own, admins see all)
    match /projects/{projectId}/orders {
      allow list, get: if request.auth != null && request.auth.uid != null;
    }
    
    // Project Gate Passes - users can read/write their own gate passes within project
    match /projects/{projectId}/gatePasses/{gatePassId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing project gate passes (users only see their own, admins see all)
    match /projects/{projectId}/gatePasses {
      allow list: if request.auth != null && 
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) || 
         // Users can only list their own gate passes - this will be filtered in the query
         request.auth != null);
    }
    
    // Project Bookings - users can only read/write their own bookings
    // Admins can read/write all bookings
    match /projects/{projectId}/bookings/{bookingId} {
      allow read, write: if request.auth != null && request.auth.uid != null;
    }
    
    // Allow listing project bookings (users only see their own, admins see all)
    match /projects/{projectId}/bookings {
      allow list, get: if request.auth != null && request.auth.uid != null;
    }
    
    // Project Service Bookings - users can only read/write their own service bookings
    // Admins can read/write all service bookings
    match /projects/{projectId}/serviceBookings/{bookingId} {
      allow read, write: if request.auth != null && request.auth.uid != null;
    }
    
    // Allow listing project service bookings (users only see their own, admins see all)
    match /projects/{projectId}/serviceBookings {
      allow list, get: if request.auth != null && request.auth.uid != null;
    }
    
    // Project Service Bookings (alternative naming) - users can read/write their own service bookings within project
    match /projects/{projectId}/service_bookings/{bookingId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow reading all service bookings for availability checking (alternative naming)
    match /projects/{projectId}/service_bookings/{bookingId} {
      allow read: if request.auth != null; // Allow any authenticated user to read for availability
    }
    
    // Allow listing project service bookings (alternative naming)
    match /projects/{projectId}/service_bookings {
      allow list: if request.auth != null;
    }
    
    // Project Events - allow authenticated users to read/write within project
    match /projects/{projectId}/events/{eventId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project events
    match /projects/{projectId}/events {
      allow list: if request.auth != null;
    }
    
    // Project Product Categories - allow authenticated users to read/write within project
    match /projects/{projectId}/productCategories/{categoryId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project product categories
    match /projects/{projectId}/productCategories {
      allow list: if request.auth != null;
    }
    
    // Project Notifications - allow authenticated users to read notifications within project
    // Admins can write, users can only read (notifications are created by admins)
    match /projects/{projectId}/notifications/{notificationId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Project Guidelines - allow authenticated users to read guidelines within project
    // Admins can write, users can only read (guidelines are created by admins)
    match /projects/{projectId}/projectGuidelines/{guidelineId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing project guidelines
    match /projects/{projectId}/projectGuidelines {
      allow list: if request.auth != null;
    }
    
    // Project Ads - allow authenticated users to read ads within project
    // Admins can write, users can only read (ads are created by admins)
    match /projects/{projectId}/ads/{adId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing project ads
    match /projects/{projectId}/ads {
      allow list: if request.auth != null;
    }
    
    // Allow listing project notifications
    match /projects/{projectId}/notifications {
      allow list: if request.auth != null;
    }
    
    // Project Dining/Shops - allow authenticated users to read/write within project
    match /projects/{projectId}/shops/{shopId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project shops
    match /projects/{projectId}/shops {
      allow list: if request.auth != null;
    }
    
    // Project Dining Categories - allow authenticated users to read/write within project
    match /projects/{projectId}/categories/{categoryId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project dining categories
    match /projects/{projectId}/categories {
      allow list: if request.auth != null;
    }
    
    // Project Dining Products - allow authenticated users to read/write within project
    match /projects/{projectId}/shops/{shopId}/products/{productId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project dining products
    match /projects/{projectId}/shops/{shopId}/products {
      allow list: if request.auth != null;
    }
    
    // Project Store Products - allow authenticated users to read/write within project
    match /projects/{projectId}/stores/{storeId}/products/{productId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project store products
    match /projects/{projectId}/stores/{storeId}/products {
      allow list: if request.auth != null;
    }
    
    // Project Ratings - allow authenticated users to read/write ratings within project
    match /projects/{projectId}/ratings/{ratingId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project ratings
    match /projects/{projectId}/ratings {
      allow list: if request.auth != null;
    }
    
    // Project Sample Data - allow authenticated users to read/write sample data within project
    match /projects/{projectId}/sampleData/{sampleId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project sample data
    match /projects/{projectId}/sampleData {
      allow list: if request.auth != null;
    }
    
    // LEGACY COLLECTIONS - Keep for backward compatibility
    // These are the old global collections that might still exist
    
    // Academies collection - allow authenticated users to read
    match /academies/{academyId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing academies collection
    match /academies {
      allow list: if request.auth != null;
    }
    
    // Bookings collection - users can read/write their own bookings
    match /bookings/{bookingId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing bookings collection (users can only see their own)
    match /bookings {
      allow list: if request.auth != null;
    }
    
    // UserBookings collection - users can read/write their own bookings
    match /userBookings/{bookingId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing userBookings collection (users can only see their own)
    match /userBookings {
      allow list: if request.auth != null;
    }
    
    // Service Bookings collection - users can read/write their own service bookings
    match /serviceBookings/{bookingId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing service bookings collection (users can only see their own)
    match /serviceBookings {
      allow list: if request.auth != null;
    }
    
    // Service Bookings collection (alternative naming) - users can read/write their own service bookings
    match /service_bookings/{bookingId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing service bookings collection (alternative naming)
    match /service_bookings {
      allow list: if request.auth != null;
    }
    
    // Sports collection - allow authenticated users to read
    match /sports/{sportId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing sports collection
    match /sports {
      allow list: if request.auth != null;
    }
    
    // Sample data collections - allow authenticated users to read
    match /sampleData/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing sample data collection
    match /sampleData {
      allow list: if request.auth != null;
    }
    
    // Events collection - allow authenticated users to read
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing events collection
    match /events {
      allow list: if request.auth != null;
    }
    
    // Courts collection - allow authenticated users to read
    match /courts/{courtId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing courts collection
    match /courts {
      allow list: if request.auth != null;
    }
    
    // Court bookings collection - users can read/write their own bookings
    match /courtBookings/{bookingId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing court bookings collection
    match /courtBookings {
      allow list: if request.auth != null;
    }
    
    // Global Notifications collection - allow authenticated users to read
    // Admins can write (for backward compatibility)
    match /notifications/{notificationId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing global notifications collection
    match /notifications {
      allow list: if request.auth != null;
    }
    
    // User FCM tokens - users can manage their own tokens
    match /users/{userId}/tokens/{tokenId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow listing user tokens
    match /users/{userId}/tokens {
      allow list: if request.auth != null && request.auth.uid == userId;
    }
    
    // Pending Admins collection - allow anyone to create (for registration)
    // Allow authenticated users to read (for status checking)
    // Only approved admins can update/delete (for approval process)
    match /pendingAdmins/{pendingAdminId} {
      allow create, write: if true; // Temporarily allow anyone to create/write (for debugging)
      allow read: if request.auth != null; // Any authenticated user can read (for status checking)
      allow update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing pending admins collection (only for approved admins)
    match /pendingAdmins {
      allow list: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Guards subcollection - allow admins to manage guard accounts within projects
    match /projects/{projectId}/guards/{guardId} {
      allow read, write: if request.auth != null && 
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) || // Admins can manage
         // Guards can read their own account for authentication
         (resource.data.firebaseUid == request.auth.uid));
    }
    
    // Allow listing guards subcollection (for admins and guard authentication)
    match /projects/{projectId}/guards {
      allow list: if request.auth != null && 
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) || // Admins can list
         // Allow guards to list guards for authentication (they'll only find their own)
         true);
    }
    
    // Allow guards to read user data from their assigned project
    // Guards can only read user data, not write or delete
    match /projects/{projectId}/users/{userId} {
      allow read: if request.auth != null && 
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) || // Admins can read
         exists(/databases/$(database)/documents/projects/$(projectId)/guards/$(request.auth.uid))); // Guards can read
    }
    
    // Allow guards to list users from their assigned project
    match /projects/{projectId}/users {
      allow list: if request.auth != null && 
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) || // Admins can list
         exists(/databases/$(database)/documents/projects/$(projectId)/guards/$(request.auth.uid))); // Guards can list
    }
    
    // Project News - allow authenticated users to read published news within project
    // Admins can write, users can only read published news
    match /projects/{projectId}/news/{newsId} {
      allow read: if request.auth != null && request.auth.uid != null;
      allow write: if request.auth != null && request.auth.uid != null;
    }
    
    // Allow listing project news (collection queries work for all authenticated users)
    // This allows the Capacitor plugin to perform collection queries
    match /projects/{projectId}/news {
      allow list, get: if request.auth != null && request.auth.uid != null;
    }
    
    // Project News Comments - allow authenticated users to read/write comments within project
    match /projects/{projectId}/news/{newsId}/comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing project news comments
    match /projects/{projectId}/news/{newsId}/comments {
      allow list: if request.auth != null;
    }
    
    // Project News Reactions - allow authenticated users to read/write reactions within project
    match /projects/{projectId}/news/{newsId}/reactions/{reactionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing project news reactions
    match /projects/{projectId}/news/{newsId}/reactions {
      allow list: if request.auth != null;
    }
    
    // SMART MIRROR COLLECTIONS - User-specific smart home data
    // Users can only access their own smart home data
    
    // User Rooms - users can read/write their own rooms
    match /users/{userId}/rooms/{roomId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow listing user rooms
    match /users/{userId}/rooms {
      allow list: if request.auth != null && request.auth.uid == userId;
    }
    
    // User Room Devices - users can read/write their own room devices
    match /users/{userId}/rooms/{roomId}/devices/{deviceId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow listing user room devices
    match /users/{userId}/rooms/{roomId}/devices {
      allow list: if request.auth != null && request.auth.uid == userId;
    }
    
    // User Profile - users can read/write their own profile
    match /users/{userId}/profile/{profileId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow listing user profiles
    match /users/{userId}/profile {
      allow list: if request.auth != null && request.auth.uid == userId;
    }
    
    // Fines and Violations
    match /projects/{projectId}/fines/{fineId} {
      // Allow reading violations for authenticated users
      // Client-side filtering ensures users only see their own violations
      allow read: if request.auth != null;
      
      // Admins can create/delete everything
      allow create, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      
      // Allow users to update their own fines (for adding messages)
      // Admins can update any fine
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Project Support Chats - allow authenticated users to read/write support chats within project
    match /projects/{projectId}/supportChats/{chatId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project support chats
    match /projects/{projectId}/supportChats {
      allow list: if request.auth != null;
    }
    
    // Project Support - allow authenticated users to read/write support tickets within project
    match /projects/{projectId}/support/{supportId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow listing project support tickets
    match /projects/{projectId}/support {
      allow list: if request.auth != null;
    }
    
    // Project Gate Pass - users can read/write their own gate passes within project
    match /projects/{projectId}/gatepass/{gatePassId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing project gate passes (users only see their own, admins see all)
    match /projects/{projectId}/gatepass {
      allow list: if request.auth != null && 
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) || 
         // Users can only list their own gate passes - this will be filtered in the query
         request.auth != null);
    }

    // GUEST PASSES COLLECTION - Allow authenticated users to create and manage guest passes
    match /guestPasses/{passId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing guest passes collection
    match /guestPasses {
      allow list: if request.auth != null;
    }
    
    // GUEST PASS SETTINGS COLLECTION - Allow authenticated users to read settings
    match /guestPassSettings/{projectId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing guest pass settings
    match /guestPassSettings {
      allow list: if request.auth != null;
    }
    
    // GUEST PASS USERS COLLECTION - Allow users to read/write their own data
    match /guestPassUsers/{userId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Allow listing guest pass users
    match /guestPassUsers {
      allow list: if request.auth != null;
    }
    
    // PROJECT NOTIFICATIONS - Allow users to read their own notifications within a project
    match /projects/{projectId}/notifications/{notificationId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow listing project notifications for authenticated users
    match /projects/{projectId}/notifications {
      allow list: if request.auth != null;
    }
    
    // USER NOTIFICATION READ STATUS - Allow users to manage their own read status
    match /users/{userId}/notificationReadStatus/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow listing user notification read status
    match /users/{userId}/notificationReadStatus {
      allow list: if request.auth != null && request.auth.uid == userId;
    }
  }
}

